@use "@/styles/variables" as *;

.BlogPreviewContainer {
  display: flex;
  flex-direction: column;
  gap: 64px;

  .UsageContainer {
    .title {
      font-size: $text-2xl;
      font-weight: bold;
      margin-bottom: 16px;

      @media (max-width: $mobile) {
        font-size: $text-sm;
        margin-bottom: 9px;
      }
    }

    .text {
      font-size: $text-base;
      margin-bottom: 16px;

      @media (max-width: $mobile) {
        display: none;
      }
    }

    .mt24 {
      margin-top: 24px;
    }

    .inputArea {
      .input {
        border-radius: $rounded;
        border: 1px solid #cbcbcb;
        background-color: $white;
        padding: 8px;
        width: 700px;

        @media (max-width: 800px) {
          max-width: 500px;
        }

        @media (max-width: $mobile) {
          max-width: 70vw;
        }
      }

      .inputButton {
        border-radius: $rounded;
        border: 1px solid #cbcbcb;
        padding: 8px;
        background-color: $white;

        &:hover {
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
        }
      }
    }
  }

  .article {
    display: flex;
    align-items: flex-start;
  }

  // 画面の下側に固定する。ただし、フッターには被らないようにする
  .reloadButton {
    position: sticky;
    margin-top: 24px;
    width: 96px;
    height: 40px;
    border-radius: 20px;
    box-shadow: $shadow-lg;
    bottom: 5%;
    left: 50%;

    z-index: 100;

    display: flex;
    align-items: center;
    justify-content: center;

    background-color: black;
    opacity: 0.85;
    color: white;
    cursor: pointer;

    transition: all 0.3s;

    &:hover {
      background-color: #333;
      box-shadow: inset 0 0 10px rgba(200, 200, 200, 0.3);
    }

    .reloadIconLoading {
      animation: spin 2s linear infinite;

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
    }

    .reloadButtonText {
      font-size: $text-base;
      margin-left: 8px;
    }
  }
}
